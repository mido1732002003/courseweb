generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  passwordHash String
  name         String?
  role         Role        @default(USER)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  favorites    Favorite[]
  progress     Progress[]
  recentViews  RecentView[]
  
  @@index([email])
}

model Section {
  id          String         @id @default(cuid())
  slug        String         @unique
  title       String
  description String?
  order       Int            @default(0)
  icon        String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  courses     Course[]
  roadmapItems RoadmapItem[]
  
  @@index([slug])
  @@index([order])
}

model RoadmapItem {
  id          String   @id @default(cuid())
  sectionId   String
  title       String
  description String?
  order       Int      @default(0)
  url         String?
  content     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@index([sectionId])
  @@index([order])
}

model Course {
  id           String       @id @default(cuid())
  sectionId    String
  title        String
  slug         String       @unique
  description  String?      @db.Text
  level        CourseLevel?
  duration     Int?         // in minutes
  thumbnailUrl String?
  videoUrl     String?
  pdfUrl       String?
  isPublished  Boolean      @default(false)
  viewCount    Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  section      Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  favorites    Favorite[]
  progress     Progress[]
  recentViews  RecentView[]
  
  @@index([slug])
  @@index([sectionId])
  @@index([isPublished])
  @@index([createdAt])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  percent   Int      @default(0) // 0-100
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model RecentView {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  viewedAt  DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([viewedAt])
}